<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lane Dodge Game</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      width: 100%;
      height: 100%;
      background: #222;
      color: white;
      font-family: sans-serif;
    }
    canvas {
      display: block;
      background: #333;
    }
    #score {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 24px;
    }
    #message {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 36px;
      color: red;
      display: none;
    }
  </style>
</head>
<body>
  <div id="score">Score: 0</div>
  <div id="message">You lost! Press any key to restart.</div>
  <canvas id="gameCanvas"></canvas>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const scoreDisplay = document.getElementById("score");
    const messageDisplay = document.getElementById("message");

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    let laneWidth = canvas.width / 3;
    let playerLane = 1;
    let player = {
      width: laneWidth * 0.5,
      height: 80,
      y: canvas.height - 100,
      color: "lime"
    };

    let obstacles = [];
    let gameSpeed = 3;
    let spawnInterval = 90;
    let frame = 0;
    let score = 0;
    let gameOver = false;

    function drawPlayer() {
      ctx.fillStyle = player.color;
      const x = playerLane * laneWidth + (laneWidth - player.width) / 2;

      // Legs
      ctx.fillRect(x + 10, player.y + 60, 10, 20);
      ctx.fillRect(x + player.width - 20, player.y + 60, 10, 20);

      // Body
      ctx.fillRect(x + player.width / 4, player.y + 20, player.width / 2, 40);

      // Arms
      ctx.fillRect(x, player.y + 30, player.width, 10);

      // Head
      ctx.beginPath();
      ctx.arc(x + player.width / 2, player.y + 10, 10, 0, Math.PI * 2);
      ctx.fill();
    }

    function drawObstacles() {
      ctx.strokeStyle = "red";
      ctx.lineWidth = 6;
      for (let i = 0; i < obstacles.length; i++) {
        const obs = obstacles[i];
        obs.y += gameSpeed;

        ctx.beginPath();
        ctx.moveTo(obs.x, obs.y);
        ctx.lineTo(obs.x + obs.width, obs.y + obs.height);
        ctx.moveTo(obs.x + obs.width, obs.y);
        ctx.lineTo(obs.x, obs.y + obs.height);
        ctx.stroke();

        const playerX = playerLane * laneWidth + (laneWidth - player.width) / 2;
        if (
          obs.lane === playerLane &&
          obs.y + obs.height >= player.y &&
          obs.y <= player.y + player.height
        ) {
          gameOver = true;
          messageDisplay.style.display = "block";
        }
      }
    }

    function spawnObstacle() {
      const lane = Math.floor(Math.random() * 3);
      laneWidth = canvas.width / 3;
      player.width = laneWidth * 0.5;
      player.y = canvas.height - 100;

      obstacles.push({
        lane: lane,
        x: lane * laneWidth + laneWidth * 0.2,
        y: -40,
        width: laneWidth * 0.6,
        height: 40
      });
    }

    function resetGame() {
      scoreDisplay.textContent = "Score: 0";
      playerLane = 1;
      obstacles = [];
      score = 0;
      frame = 0;
      gameSpeed = 3;
      gameOver = false;
      messageDisplay.style.display = "none";
    }

    function update() {
      if (gameOver) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawPlayer();
      drawObstacles();

      frame++;
      if (frame % spawnInterval === 0) {
        let spawnCount = 1;
        score++;
        gameSpeed += 0.2;

        if (score % 15 === 0) {
          gameSpeed += 0.1;
          spawnCount = 2;
        }

        for (let i = 0; i < spawnCount; i++) {
          spawnObstacle();
        }

        scoreDisplay.textContent = "Score: " + score;
      }

      requestAnimationFrame(update);
    }

    document.addEventListener("keydown", (e) => {
      if (gameOver) {
        resetGame();
        update();
        return;
      }
      if ((e.key === "ArrowLeft" || e.key === "a" || e.key === "A") && playerLane > 0) playerLane--;
      if ((e.key === "ArrowRight" || e.key === "d" || e.key === "D") && playerLane < 2) playerLane++;
    });

    update();
  </script>
</body>
</html>
